<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_classjpl_1_1__exception_1_1_illegal_cast_exception" xml:lang="en-US">
<title>jpl::_exception::IllegalCastException Class Reference</title>
<indexterm><primary>jpl::_exception::IllegalCastException</primary></indexterm>
<para>
<computeroutput>#include &lt;IllegalCastException.hpp&gt;</computeroutput>
</para>
<para>Inheritance diagram for jpl::_exception::IllegalCastException:    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="../../d7/dc7/classjpl_1_1__exception_1_1_illegal_cast_exception.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
<simplesect>
    <title>Public Member Functions    </title>
        <itemizedlist>
            <listitem><para><link linkend="_classjpl_1_1__exception_1_1_illegal_cast_exception_1aad5c886977daa0d3e8d64fe3dc6755d7">IllegalCastException</link> (const char *<link linkend="_classjpl_1_1__exception_1_1_illegal_cast_exception_1a2e3954ae4c72f6de28721a24b05efb24">_cast_attempted</link>, const char *<link linkend="_classjpl_1_1__exception_1_1_illegal_cast_exception_1af3222a274e7ab611982066a2d9af3005">_cast_needed</link>, const char *<link linkend="_classjpl_1_1__exception_1_1_abstract_exception_1a8a40d27a336fcfeb26e7fd7b6c8522ec">msg</link>)</para>
</listitem>
            <listitem><para><link linkend="_classjpl_1_1__exception_1_1_illegal_cast_exception_1a3e46e9adbe20068ce4945b68263ca536">IllegalCastException</link> (const char *<link linkend="_classjpl_1_1__exception_1_1_illegal_cast_exception_1a2e3954ae4c72f6de28721a24b05efb24">_cast_attempted</link>, const char *<link linkend="_classjpl_1_1__exception_1_1_illegal_cast_exception_1af3222a274e7ab611982066a2d9af3005">_cast_needed</link>)</para>
</listitem>
            <listitem><para><link linkend="_classjpl_1_1__exception_1_1_illegal_cast_exception_1a77112ac7db37854409a7dff150ea142c">IllegalCastException</link> (const char *<link linkend="_classjpl_1_1__exception_1_1_abstract_exception_1a8a40d27a336fcfeb26e7fd7b6c8522ec">msg</link>)</para>
</listitem>
            <listitem><para><link linkend="_classjpl_1_1__exception_1_1_illegal_cast_exception_1a474cca17d3db27c915b12b73838c318a">IllegalCastException</link> ()</para>
</listitem>
            <listitem><para>const char * <link linkend="_classjpl_1_1__exception_1_1_illegal_cast_exception_1a1a3a798cacf8456d77cd291b32c33e01">what</link> () const _GLIBCXX_TXN_SAFE_DYN _GLIBCXX_NOTHROW override</para>

<para>Print the type of the exception which has been thrown with the message that has been passed, too. </para>
</listitem>
        </itemizedlist>
</simplesect>
Public Member Functions inherited from <link linkend="_classjpl_1_1__exception_1_1_runtime_exception">jpl::_exception::RuntimeException</link>        <itemizedlist>
            <listitem><para><link linkend="_classjpl_1_1__exception_1_1_runtime_exception_1a03edc87ffaaa4c5dfb651cd4aa924ade">RuntimeException</link> (const char *<link linkend="_classjpl_1_1__exception_1_1_abstract_exception_1add4642360b0286f49d367e431b6473fa">type_ex</link>, const char *<link linkend="_classjpl_1_1__exception_1_1_abstract_exception_1a8a40d27a336fcfeb26e7fd7b6c8522ec">msg</link>)</para>
</listitem>
            <listitem><para><link linkend="_classjpl_1_1__exception_1_1_runtime_exception_1ae493ccae676b5f4364b1a9a3250b34ab">RuntimeException</link> (const char *<link linkend="_classjpl_1_1__exception_1_1_abstract_exception_1a8a40d27a336fcfeb26e7fd7b6c8522ec">msg</link>)</para>
</listitem>
        </itemizedlist>
Public Member Functions inherited from <link linkend="_classjpl_1_1__exception_1_1_abstract_exception">jpl::_exception::AbstractException</link>        <itemizedlist>
            <listitem><para>virtual const char * <link linkend="_classjpl_1_1__exception_1_1_abstract_exception_1ae17527e3192e5afdb01a90f199dbafe5">what</link> () const _GLIBCXX_TXN_SAFE_DYN _GLIBCXX_NOTHROW override</para>

<para>Print the type of the exception which has been thrown with the message that has been passed, too. </para>
</listitem>
            <listitem><para>virtual const char * <link linkend="_classjpl_1_1__exception_1_1_abstract_exception_1a763c7353208d799125dc4d871f510cef">getStacktrace</link> () const</para>
</listitem>
        </itemizedlist>
<simplesect>
    <title>Private Attributes    </title>
        <itemizedlist>
            <listitem><para>const char * <link linkend="_classjpl_1_1__exception_1_1_illegal_cast_exception_1a2e3954ae4c72f6de28721a24b05efb24">_cast_attempted</link></para>
</listitem>
            <listitem><para>const char * <link linkend="_classjpl_1_1__exception_1_1_illegal_cast_exception_1af3222a274e7ab611982066a2d9af3005">_cast_needed</link></para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Additional Inherited Members    </title>
Protected Member Functions inherited from <link linkend="_classjpl_1_1__exception_1_1_abstract_exception">jpl::_exception::AbstractException</link>        <itemizedlist>
            <listitem><para><link linkend="_classjpl_1_1__exception_1_1_abstract_exception_1ab1e5aa0f3b5106e72cb9de93f93e3a8c">AbstractException</link> (const char *<link linkend="_classjpl_1_1__exception_1_1_abstract_exception_1add4642360b0286f49d367e431b6473fa">type_ex</link>)</para>
</listitem>
            <listitem><para><link linkend="_classjpl_1_1__exception_1_1_abstract_exception_1af2dafed1749e2d7cb0097172f5974c0d">AbstractException</link> (const char *<link linkend="_classjpl_1_1__exception_1_1_abstract_exception_1add4642360b0286f49d367e431b6473fa">type_ex</link>, const char *<link linkend="_classjpl_1_1__exception_1_1_abstract_exception_1a8a40d27a336fcfeb26e7fd7b6c8522ec">msg</link>)</para>
</listitem>
        </itemizedlist>
</simplesect>
Protected Attributes inherited from <link linkend="_classjpl_1_1__exception_1_1_abstract_exception">jpl::_exception::AbstractException</link>        <itemizedlist>
            <listitem><para>const char * <link linkend="_classjpl_1_1__exception_1_1_abstract_exception_1add4642360b0286f49d367e431b6473fa">type_ex</link></para>
</listitem>
            <listitem><para>const char * <link linkend="_classjpl_1_1__exception_1_1_abstract_exception_1a8a40d27a336fcfeb26e7fd7b6c8522ec">msg</link></para>
</listitem>
        </itemizedlist>
<section>
<title>Detailed Description</title>
<para>
Definition at line <link linkend="__illegal_cast_exception_8hpp_source_1l00020">20</link> of file <link linkend="__illegal_cast_exception_8hpp_source">IllegalCastException.hpp</link>.</para>
</section>
<section>
<title>Constructor &amp; Destructor Documentation</title>
<anchor xml:id="_classjpl_1_1__exception_1_1_illegal_cast_exception_1aad5c886977daa0d3e8d64fe3dc6755d7"/><section>
    <title>IllegalCastException()<computeroutput>[1/4]</computeroutput></title>
<indexterm><primary>IllegalCastException</primary><secondary>jpl::_exception::IllegalCastException</secondary></indexterm>
<indexterm><primary>jpl::_exception::IllegalCastException</primary><secondary>IllegalCastException</secondary></indexterm>
<para><computeroutput>jpl::_exception::IllegalCastException::IllegalCastException (const char * _cast_attempted, const char * _cast_needed, const char * msg)<computeroutput>[inline]</computeroutput></computeroutput></para><para>
Definition at line <link linkend="__illegal_cast_exception_8hpp_source_1l00035">35</link> of file <link linkend="__illegal_cast_exception_8hpp_source">IllegalCastException.hpp</link>.</para>
</section>
<anchor xml:id="_classjpl_1_1__exception_1_1_illegal_cast_exception_1a3e46e9adbe20068ce4945b68263ca536"/><section>
    <title>IllegalCastException()<computeroutput>[2/4]</computeroutput></title>
<indexterm><primary>IllegalCastException</primary><secondary>jpl::_exception::IllegalCastException</secondary></indexterm>
<indexterm><primary>jpl::_exception::IllegalCastException</primary><secondary>IllegalCastException</secondary></indexterm>
<para><computeroutput>jpl::_exception::IllegalCastException::IllegalCastException (const char * _cast_attempted, const char * _cast_needed)<computeroutput>[inline]</computeroutput></computeroutput></para><para>
Definition at line <link linkend="__illegal_cast_exception_8hpp_source_1l00037">37</link> of file <link linkend="__illegal_cast_exception_8hpp_source">IllegalCastException.hpp</link>.</para>
</section>
<anchor xml:id="_classjpl_1_1__exception_1_1_illegal_cast_exception_1a77112ac7db37854409a7dff150ea142c"/><section>
    <title>IllegalCastException()<computeroutput>[3/4]</computeroutput></title>
<indexterm><primary>IllegalCastException</primary><secondary>jpl::_exception::IllegalCastException</secondary></indexterm>
<indexterm><primary>jpl::_exception::IllegalCastException</primary><secondary>IllegalCastException</secondary></indexterm>
<para><computeroutput>jpl::_exception::IllegalCastException::IllegalCastException (const char * msg)<computeroutput>[inline]</computeroutput></computeroutput></para><para>
Definition at line <link linkend="__illegal_cast_exception_8hpp_source_1l00038">38</link> of file <link linkend="__illegal_cast_exception_8hpp_source">IllegalCastException.hpp</link>.</para>
</section>
<anchor xml:id="_classjpl_1_1__exception_1_1_illegal_cast_exception_1a474cca17d3db27c915b12b73838c318a"/><section>
    <title>IllegalCastException()<computeroutput>[4/4]</computeroutput></title>
<indexterm><primary>IllegalCastException</primary><secondary>jpl::_exception::IllegalCastException</secondary></indexterm>
<indexterm><primary>jpl::_exception::IllegalCastException</primary><secondary>IllegalCastException</secondary></indexterm>
<para><computeroutput>jpl::_exception::IllegalCastException::IllegalCastException ( )<computeroutput>[inline]</computeroutput></computeroutput></para><para>
Definition at line <link linkend="__illegal_cast_exception_8hpp_source_1l00039">39</link> of file <link linkend="__illegal_cast_exception_8hpp_source">IllegalCastException.hpp</link>.</para>
</section>
</section>
<section>
<title>Member Function Documentation</title>
<anchor xml:id="_classjpl_1_1__exception_1_1_illegal_cast_exception_1a1a3a798cacf8456d77cd291b32c33e01"/><section>
    <title>what()</title>
<indexterm><primary>what</primary><secondary>jpl::_exception::IllegalCastException</secondary></indexterm>
<indexterm><primary>jpl::_exception::IllegalCastException</primary><secondary>what</secondary></indexterm>
<para><computeroutput>const char * jpl::_exception::IllegalCastException::what ( ) const<computeroutput>[inline]</computeroutput>, <computeroutput>[override]</computeroutput>, <computeroutput>[virtual]</computeroutput></computeroutput></para><para>

<para>Print the type of the exception which has been thrown with the message that has been passed, too. </para>
</para>

<para><formalpara><title>Returns</title>

<para>const char* </para>
</formalpara>
</para>
<para>
Reimplemented from <link linkend="_classjpl_1_1__exception_1_1_abstract_exception_1ae17527e3192e5afdb01a90f199dbafe5">jpl::_exception::AbstractException</link>.</para>
<para>
Definition at line <link linkend="__illegal_cast_exception_8hpp_source_1l00041">41</link> of file <link linkend="__illegal_cast_exception_8hpp_source">IllegalCastException.hpp</link>.</para>
</section>
</section>
<section>
<title>Field Documentation</title>
<anchor xml:id="_classjpl_1_1__exception_1_1_illegal_cast_exception_1a2e3954ae4c72f6de28721a24b05efb24"/><section>
    <title>_cast_attempted</title>
<indexterm><primary>_cast_attempted</primary><secondary>jpl::_exception::IllegalCastException</secondary></indexterm>
<indexterm><primary>jpl::_exception::IllegalCastException</primary><secondary>_cast_attempted</secondary></indexterm>
<para><computeroutput>const char* jpl::_exception::IllegalCastException::_cast_attempted<computeroutput>[private]</computeroutput></computeroutput></para>
<para>The class which the field has been attempted to be cast to </para>
<para>
Definition at line <link linkend="__illegal_cast_exception_8hpp_source_1l00027">27</link> of file <link linkend="__illegal_cast_exception_8hpp_source">IllegalCastException.hpp</link>.</para>
</section>
<anchor xml:id="_classjpl_1_1__exception_1_1_illegal_cast_exception_1af3222a274e7ab611982066a2d9af3005"/><section>
    <title>_cast_needed</title>
<indexterm><primary>_cast_needed</primary><secondary>jpl::_exception::IllegalCastException</secondary></indexterm>
<indexterm><primary>jpl::_exception::IllegalCastException</primary><secondary>_cast_needed</secondary></indexterm>
<para><computeroutput>const char* jpl::_exception::IllegalCastException::_cast_needed<computeroutput>[private]</computeroutput></computeroutput></para>
<para>The class supplied </para>
<para>
Definition at line <link linkend="__illegal_cast_exception_8hpp_source_1l00031">31</link> of file <link linkend="__illegal_cast_exception_8hpp_source">IllegalCastException.hpp</link>.</para>
</section>
<para>
The documentation for this class was generated from the following file:</para>
src/runtime/<link linkend="__illegal_cast_exception_8hpp">IllegalCastException.hpp</link></section>
</section>
