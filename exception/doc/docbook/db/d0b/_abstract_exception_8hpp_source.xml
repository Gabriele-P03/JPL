<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="__abstract_exception_8hpp_source" xml:lang="en-US">
<title>AbstractException.hpp</title>
<indexterm><primary>src/AbstractException.hpp</primary></indexterm>
Go to the documentation of this file.<programlisting linenumbering="unnumbered"><anchor xml:id="__abstract_exception_8hpp_source_1l00001"/>00001 
<anchor xml:id="__abstract_exception_8hpp_source_1l00015"/>00015 <emphasis role="preprocessor">#ifndef&#32;ABSTRACT_EXCEPTION_JPL</emphasis>
<anchor xml:id="__abstract_exception_8hpp_source_1l00016"/>00016 <emphasis role="preprocessor">#define&#32;ABSTRACT_EXCEPTION_JPL</emphasis>
<anchor xml:id="__abstract_exception_8hpp_source_1l00017"/>00017 
<anchor xml:id="__abstract_exception_8hpp_source_1l00018"/>00018 <emphasis role="preprocessor">#include&#32;&lt;iostream&gt;</emphasis>
<anchor xml:id="__abstract_exception_8hpp_source_1l00019"/>00019 
<anchor xml:id="__abstract_exception_8hpp_source_1l00020"/>00020 <emphasis role="preprocessor">#include&#32;&lt;boost/stacktrace.hpp&gt;</emphasis>
<anchor xml:id="__abstract_exception_8hpp_source_1l00021"/>00021 <emphasis role="preprocessor">#include&#32;&lt;boost/stacktrace/frame.hpp&gt;</emphasis>
<anchor xml:id="__abstract_exception_8hpp_source_1l00022"/>00022 
<anchor xml:id="__abstract_exception_8hpp_source_1l00023"/><link linkend="_namespacejpl">00023</link> <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespacejpl">jpl</link>{
<anchor xml:id="__abstract_exception_8hpp_source_1l00024"/>00024 
<anchor xml:id="__abstract_exception_8hpp_source_1l00025"/><link linkend="_namespacejpl_1_1__exception">00025</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">namespace&#32;</emphasis>_exception{
<anchor xml:id="__abstract_exception_8hpp_source_1l00026"/>00026 
<anchor xml:id="__abstract_exception_8hpp_source_1l00027"/><link linkend="_classjpl_1_1__exception_1_1_abstract_exception">00027</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis><link linkend="_classjpl_1_1__exception_1_1_abstract_exception">AbstractException</link>&#32;:&#32;<emphasis role="keyword">protected</emphasis>&#32;std::exception{
<anchor xml:id="__abstract_exception_8hpp_source_1l00028"/>00028 
<anchor xml:id="__abstract_exception_8hpp_source_1l00029"/>00029 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">protected</emphasis>:
<anchor xml:id="__abstract_exception_8hpp_source_1l00030"/>00030 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__abstract_exception_8hpp_source_1l00036"/><link linkend="_classjpl_1_1__exception_1_1_abstract_exception_1add4642360b0286f49d367e431b6473fa">00036</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*&#32;<link linkend="_classjpl_1_1__exception_1_1_abstract_exception_1add4642360b0286f49d367e431b6473fa">type_ex</link>;
<anchor xml:id="__abstract_exception_8hpp_source_1l00037"/>00037 
<anchor xml:id="__abstract_exception_8hpp_source_1l00042"/><link linkend="_classjpl_1_1__exception_1_1_abstract_exception_1a8a40d27a336fcfeb26e7fd7b6c8522ec">00042</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*&#32;<link linkend="_classjpl_1_1__exception_1_1_abstract_exception_1a8a40d27a336fcfeb26e7fd7b6c8522ec">msg</link>;&#32;&#32;&#32;&#32;
<anchor xml:id="__abstract_exception_8hpp_source_1l00043"/>00043 
<anchor xml:id="__abstract_exception_8hpp_source_1l00044"/><link linkend="_classjpl_1_1__exception_1_1_abstract_exception_1ab1e5aa0f3b5106e72cb9de93f93e3a8c">00044</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classjpl_1_1__exception_1_1_abstract_exception_1ab1e5aa0f3b5106e72cb9de93f93e3a8c">AbstractException</link>(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*&#32;<link linkend="_classjpl_1_1__exception_1_1_abstract_exception_1add4642360b0286f49d367e431b6473fa">type_ex</link>)&#32;:&#32;<link linkend="_classjpl_1_1__exception_1_1_abstract_exception">AbstractException</link>(<link linkend="_classjpl_1_1__exception_1_1_abstract_exception_1add4642360b0286f49d367e431b6473fa">type_ex</link>,&#32;<emphasis role="stringliteral">&quot;&quot;</emphasis>){}
<anchor xml:id="__abstract_exception_8hpp_source_1l00045"/><link linkend="_classjpl_1_1__exception_1_1_abstract_exception_1af2dafed1749e2d7cb0097172f5974c0d">00045</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classjpl_1_1__exception_1_1_abstract_exception_1af2dafed1749e2d7cb0097172f5974c0d">AbstractException</link>(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*&#32;<link linkend="_classjpl_1_1__exception_1_1_abstract_exception_1add4642360b0286f49d367e431b6473fa">type_ex</link>,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*&#32;<link linkend="_classjpl_1_1__exception_1_1_abstract_exception_1a8a40d27a336fcfeb26e7fd7b6c8522ec">msg</link>)&#32;:&#32;<link linkend="_classjpl_1_1__exception_1_1_abstract_exception_1add4642360b0286f49d367e431b6473fa">type_ex</link>(<link linkend="_classjpl_1_1__exception_1_1_abstract_exception_1add4642360b0286f49d367e431b6473fa">type_ex</link>),&#32;<link linkend="_classjpl_1_1__exception_1_1_abstract_exception_1a8a40d27a336fcfeb26e7fd7b6c8522ec">msg</link>(<link linkend="_classjpl_1_1__exception_1_1_abstract_exception_1a8a40d27a336fcfeb26e7fd7b6c8522ec">msg</link>){}
<anchor xml:id="__abstract_exception_8hpp_source_1l00046"/>00046 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__abstract_exception_8hpp_source_1l00047"/>00047 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
<anchor xml:id="__abstract_exception_8hpp_source_1l00048"/>00048 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__abstract_exception_8hpp_source_1l00054"/><link linkend="_classjpl_1_1__exception_1_1_abstract_exception_1ae17527e3192e5afdb01a90f199dbafe5">00054</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keyword">virtual</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*&#32;<link linkend="_classjpl_1_1__exception_1_1_abstract_exception_1ae17527e3192e5afdb01a90f199dbafe5">what</link>()&#32;const&#32;_GLIBCXX_TXN_SAFE_DYN&#32;_GLIBCXX_NOTHROW<emphasis role="keyword">&#32;override</emphasis>{
<anchor xml:id="__abstract_exception_8hpp_source_1l00055"/>00055 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::string&#32;buffer&#32;=&#32;
<anchor xml:id="__abstract_exception_8hpp_source_1l00056"/>00056 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::string(this-&gt;type_ex)&#32;+&#32;<emphasis role="stringliteral">&quot;:&#32;&quot;</emphasis>&#32;+&#32;std::string(this-&gt;msg);
<anchor xml:id="__abstract_exception_8hpp_source_1l00057"/>00057 
<anchor xml:id="__abstract_exception_8hpp_source_1l00058"/>00058 
<anchor xml:id="__abstract_exception_8hpp_source_1l00059"/>00059 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">char</emphasis>*&#32;c_buffer&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>[buffer.size()];
<anchor xml:id="__abstract_exception_8hpp_source_1l00060"/>00060 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;memcpy(c_buffer,&#32;buffer.c_str(),&#32;buffer.size());
<anchor xml:id="__abstract_exception_8hpp_source_1l00061"/>00061 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;c_buffer;
<anchor xml:id="__abstract_exception_8hpp_source_1l00062"/>00062 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__abstract_exception_8hpp_source_1l00063"/>00063 
<anchor xml:id="__abstract_exception_8hpp_source_1l00067"/><link linkend="_classjpl_1_1__exception_1_1_abstract_exception_1a763c7353208d799125dc4d871f510cef">00067</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keyword">virtual</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*&#32;<link linkend="_classjpl_1_1__exception_1_1_abstract_exception_1a763c7353208d799125dc4d871f510cef">getStacktrace</link>()<emphasis role="keyword">&#32;const</emphasis>{
<anchor xml:id="__abstract_exception_8hpp_source_1l00068"/>00068 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;stacktrace&#32;=&#32;boost::stacktrace::stacktrace();
<anchor xml:id="__abstract_exception_8hpp_source_1l00069"/>00069 
<anchor xml:id="__abstract_exception_8hpp_source_1l00070"/>00070 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::string&#32;buffer&#32;=&#32;std::string(this-&gt;<link linkend="_classjpl_1_1__exception_1_1_abstract_exception_1ae17527e3192e5afdb01a90f199dbafe5">what</link>())&#32;+&#32;<emphasis role="stringliteral">&quot;\n&quot;</emphasis>;
<anchor xml:id="__abstract_exception_8hpp_source_1l00071"/>00071 
<anchor xml:id="__abstract_exception_8hpp_source_1l00072"/>00072 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;i&#32;=&#32;1;&#32;i&#32;&lt;stacktrace.size();&#32;i++){
<anchor xml:id="__abstract_exception_8hpp_source_1l00073"/>00073 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__abstract_exception_8hpp_source_1l00074"/>00074 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;boost::stacktrace::frame&#32;frame&#32;=&#32;stacktrace[i];
<anchor xml:id="__abstract_exception_8hpp_source_1l00075"/>00075 
<anchor xml:id="__abstract_exception_8hpp_source_1l00076"/>00076 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;buffer&#32;+=&#32;frame.name()&#32;+&#32;<emphasis role="stringliteral">&quot;&#32;of&#32;&quot;</emphasis>&#32;+&#32;frame.source_file()&#32;+&#32;<emphasis role="stringliteral">&quot;&#32;at&#32;line&#32;&quot;</emphasis>&#32;+&#32;std::to_string(frame.source_line())&#32;+&#32;<emphasis role="stringliteral">&quot;\n&quot;</emphasis>;
<anchor xml:id="__abstract_exception_8hpp_source_1l00077"/>00077 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;&#32;&#32;&#32;
<anchor xml:id="__abstract_exception_8hpp_source_1l00078"/>00078 
<anchor xml:id="__abstract_exception_8hpp_source_1l00079"/>00079 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">char</emphasis>*&#32;c_buffer&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>[buffer.size()];
<anchor xml:id="__abstract_exception_8hpp_source_1l00080"/>00080 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;memcpy(c_buffer,&#32;buffer.c_str(),&#32;buffer.size());
<anchor xml:id="__abstract_exception_8hpp_source_1l00081"/>00081 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;c_buffer;
<anchor xml:id="__abstract_exception_8hpp_source_1l00082"/>00082 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__abstract_exception_8hpp_source_1l00083"/>00083 
<anchor xml:id="__abstract_exception_8hpp_source_1l00091"/><link linkend="_classjpl_1_1__exception_1_1_abstract_exception_1acc66a0e9cac563660a670782749334c3">00091</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keyword">friend</emphasis>&#32;std::ostream&amp;&#32;<link linkend="_classjpl_1_1__exception_1_1_abstract_exception_1acc66a0e9cac563660a670782749334c3">operator&lt;&lt;</link>(std::ostream&amp;&#32;os,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classjpl_1_1__exception_1_1_abstract_exception">AbstractException</link>&#32;&amp;iae){
<anchor xml:id="__abstract_exception_8hpp_source_1l00092"/>00092 
<anchor xml:id="__abstract_exception_8hpp_source_1l00093"/>00093 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*&#32;buffer&#32;=&#32;iae.<link linkend="_classjpl_1_1__exception_1_1_abstract_exception_1ae17527e3192e5afdb01a90f199dbafe5">what</link>();
<anchor xml:id="__abstract_exception_8hpp_source_1l00094"/>00094 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;os&lt;&lt;buffer;
<anchor xml:id="__abstract_exception_8hpp_source_1l00095"/>00095 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">delete</emphasis>[]&#32;buffer;
<anchor xml:id="__abstract_exception_8hpp_source_1l00096"/>00096 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;os;
<anchor xml:id="__abstract_exception_8hpp_source_1l00097"/>00097 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__abstract_exception_8hpp_source_1l00098"/>00098 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;};
<anchor xml:id="__abstract_exception_8hpp_source_1l00099"/>00099 &#32;&#32;&#32;&#32;}
<anchor xml:id="__abstract_exception_8hpp_source_1l00100"/>00100 }
<anchor xml:id="__abstract_exception_8hpp_source_1l00101"/>00101 
<anchor xml:id="__abstract_exception_8hpp_source_1l00107"/><link linkend="__abstract_exception_8hpp_1ae4fd3f8792e038acc9f1c0703205f8b0">00107</link> <emphasis role="preprocessor">#define&#32;STRINGIFY(arg)&#32;#arg</emphasis>
<anchor xml:id="__abstract_exception_8hpp_source_1l00108"/>00108 
<anchor xml:id="__abstract_exception_8hpp_source_1l00109"/>00109 <emphasis role="preprocessor">#endif</emphasis>
</programlisting></section>
