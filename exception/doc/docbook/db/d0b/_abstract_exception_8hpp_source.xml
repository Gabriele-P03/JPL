<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="__abstract_exception_8hpp_source" xml:lang="en-US">
<title>AbstractException.hpp</title>
<indexterm><primary>src/AbstractException.hpp</primary></indexterm>
Go to the documentation of this file.<programlisting linenumbering="unnumbered"><anchor xml:id="__abstract_exception_8hpp_source_1l00001"/>00001 
<anchor xml:id="__abstract_exception_8hpp_source_1l00018"/>00018 <emphasis role="preprocessor">#ifndef&#32;ABSTRACT_EXCEPTION_JPL</emphasis>
<anchor xml:id="__abstract_exception_8hpp_source_1l00019"/>00019 <emphasis role="preprocessor">#define&#32;ABSTRACT_EXCEPTION_JPL</emphasis>
<anchor xml:id="__abstract_exception_8hpp_source_1l00020"/>00020 
<anchor xml:id="__abstract_exception_8hpp_source_1l00021"/>00021 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#include&#32;&lt;iostream&gt;</emphasis>
<anchor xml:id="__abstract_exception_8hpp_source_1l00022"/>00022 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#include&#32;&lt;vector&gt;</emphasis>
<anchor xml:id="__abstract_exception_8hpp_source_1l00023"/>00023 
<anchor xml:id="__abstract_exception_8hpp_source_1l00024"/>00024 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#ifdef&#32;USE_STACKTRACE_W_EXCEPTION_JPL</emphasis>
<anchor xml:id="__abstract_exception_8hpp_source_1l00025"/>00025 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;#include&#32;&lt;jpl/utils/debug/stacktrace/Stacktrace.hpp&gt;</emphasis>
<anchor xml:id="__abstract_exception_8hpp_source_1l00026"/>00026 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#endif</emphasis>
<anchor xml:id="__abstract_exception_8hpp_source_1l00027"/>00027 
<anchor xml:id="__abstract_exception_8hpp_source_1l00028"/><link linkend="_namespacejpl">00028</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespacejpl">jpl</link>{
<anchor xml:id="__abstract_exception_8hpp_source_1l00029"/>00029 
<anchor xml:id="__abstract_exception_8hpp_source_1l00030"/><link linkend="_namespacejpl_1_1__exception">00030</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">namespace&#32;</emphasis>_exception{
<anchor xml:id="__abstract_exception_8hpp_source_1l00031"/>00031 
<anchor xml:id="__abstract_exception_8hpp_source_1l00032"/>00032 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis><link linkend="_classjpl_1_1__exception_1_1_abstract_exception">AbstractException</link>;
<anchor xml:id="__abstract_exception_8hpp_source_1l00033"/>00033 
<anchor xml:id="__abstract_exception_8hpp_source_1l00034"/>00034 
<anchor xml:id="__abstract_exception_8hpp_source_1l00035"/><link linkend="_classjpl_1_1__exception_1_1_abstract_exception">00035</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis><link linkend="_classjpl_1_1__exception_1_1_abstract_exception">AbstractException</link>&#32;:&#32;<emphasis role="keyword">protected</emphasis>&#32;std::exception{
<anchor xml:id="__abstract_exception_8hpp_source_1l00036"/>00036 
<anchor xml:id="__abstract_exception_8hpp_source_1l00037"/>00037 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">protected</emphasis>:
<anchor xml:id="__abstract_exception_8hpp_source_1l00038"/>00038 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__abstract_exception_8hpp_source_1l00044"/><link linkend="_classjpl_1_1__exception_1_1_abstract_exception_1ac135cf56b3dc4fdb4bc558d345d0f436">00044</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::string&#32;<link linkend="_classjpl_1_1__exception_1_1_abstract_exception_1ac135cf56b3dc4fdb4bc558d345d0f436">type_ex</link>;
<anchor xml:id="__abstract_exception_8hpp_source_1l00045"/>00045 
<anchor xml:id="__abstract_exception_8hpp_source_1l00050"/><link linkend="_classjpl_1_1__exception_1_1_abstract_exception_1a2aa9aba38aab837ce8eee9552dd2f1fb">00050</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::string&#32;<link linkend="_classjpl_1_1__exception_1_1_abstract_exception_1a2aa9aba38aab837ce8eee9552dd2f1fb">msg</link>;&#32;&#32;&#32;
<anchor xml:id="__abstract_exception_8hpp_source_1l00051"/>00051 
<anchor xml:id="__abstract_exception_8hpp_source_1l00052"/>00052 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;#ifdef&#32;USE_STACKTRACE_W_EXCEPTION_JPL</emphasis>
<anchor xml:id="__abstract_exception_8hpp_source_1l00053"/>00053 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_utils::_debug::Stacktrace*&#32;stacktrace;
<anchor xml:id="__abstract_exception_8hpp_source_1l00054"/>00054 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;#endif</emphasis>
<anchor xml:id="__abstract_exception_8hpp_source_1l00055"/>00055 
<anchor xml:id="__abstract_exception_8hpp_source_1l00056"/><link linkend="_classjpl_1_1__exception_1_1_abstract_exception_1a705351cb7a55d23909e49c9f447d5a8e">00056</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classjpl_1_1__exception_1_1_abstract_exception_1a705351cb7a55d23909e49c9f447d5a8e">AbstractException</link>(std::string&#32;<link linkend="_classjpl_1_1__exception_1_1_abstract_exception_1ac135cf56b3dc4fdb4bc558d345d0f436">type_ex</link>)&#32;:&#32;<link linkend="_classjpl_1_1__exception_1_1_abstract_exception">AbstractException</link>(<link linkend="_classjpl_1_1__exception_1_1_abstract_exception_1ac135cf56b3dc4fdb4bc558d345d0f436">type_ex</link>,&#32;<emphasis role="stringliteral">&quot;&quot;</emphasis>){}
<anchor xml:id="__abstract_exception_8hpp_source_1l00057"/><link linkend="_classjpl_1_1__exception_1_1_abstract_exception_1af4f36b532a1cd3916101e10216f5d8e2">00057</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classjpl_1_1__exception_1_1_abstract_exception_1af4f36b532a1cd3916101e10216f5d8e2">AbstractException</link>(std::string&#32;<link linkend="_classjpl_1_1__exception_1_1_abstract_exception_1ac135cf56b3dc4fdb4bc558d345d0f436">type_ex</link>,&#32;std::string&#32;<link linkend="_classjpl_1_1__exception_1_1_abstract_exception_1a2aa9aba38aab837ce8eee9552dd2f1fb">msg</link>)&#32;:&#32;<link linkend="_classjpl_1_1__exception_1_1_abstract_exception_1ac135cf56b3dc4fdb4bc558d345d0f436">type_ex</link>(<link linkend="_classjpl_1_1__exception_1_1_abstract_exception_1ac135cf56b3dc4fdb4bc558d345d0f436">type_ex</link>),&#32;<link linkend="_classjpl_1_1__exception_1_1_abstract_exception_1a2aa9aba38aab837ce8eee9552dd2f1fb">msg</link>(<link linkend="_classjpl_1_1__exception_1_1_abstract_exception_1a2aa9aba38aab837ce8eee9552dd2f1fb">msg</link>){
<anchor xml:id="__abstract_exception_8hpp_source_1l00058"/>00058 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;#ifdef&#32;USE_STACKTRACE_W_EXCEPTION_JPL</emphasis>
<anchor xml:id="__abstract_exception_8hpp_source_1l00059"/>00059 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;this-&gt;stacktrace&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;_utils::_debug::Stacktrace(0,&#32;0);
<anchor xml:id="__abstract_exception_8hpp_source_1l00060"/>00060 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;#endif</emphasis>
<anchor xml:id="__abstract_exception_8hpp_source_1l00061"/>00061 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__abstract_exception_8hpp_source_1l00062"/>00062 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__abstract_exception_8hpp_source_1l00063"/>00063 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
<anchor xml:id="__abstract_exception_8hpp_source_1l00064"/>00064 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__abstract_exception_8hpp_source_1l00070"/><link linkend="_classjpl_1_1__exception_1_1_abstract_exception_1ae17527e3192e5afdb01a90f199dbafe5">00070</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keyword">virtual</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*&#32;<link linkend="_classjpl_1_1__exception_1_1_abstract_exception_1ae17527e3192e5afdb01a90f199dbafe5">what</link>()&#32;const&#32;_GLIBCXX_TXN_SAFE_DYN&#32;_GLIBCXX_NOTHROW<emphasis role="keyword">&#32;override</emphasis>{
<anchor xml:id="__abstract_exception_8hpp_source_1l00071"/>00071 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::string&#32;buffer&#32;=&#32;
<anchor xml:id="__abstract_exception_8hpp_source_1l00072"/>00072 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::string(this-&gt;type_ex)&#32;+&#32;<emphasis role="stringliteral">&quot;:&#32;&quot;</emphasis>&#32;+&#32;std::string(this-&gt;msg)&#32;+&#32;<emphasis role="stringliteral">&quot;\0&quot;</emphasis>;
<anchor xml:id="__abstract_exception_8hpp_source_1l00073"/>00073 
<anchor xml:id="__abstract_exception_8hpp_source_1l00074"/>00074 
<anchor xml:id="__abstract_exception_8hpp_source_1l00075"/>00075 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">char</emphasis>*&#32;c_buffer&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>[buffer.size()];
<anchor xml:id="__abstract_exception_8hpp_source_1l00076"/>00076 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;memcpy(c_buffer,&#32;buffer.c_str(),&#32;buffer.size());
<anchor xml:id="__abstract_exception_8hpp_source_1l00077"/>00077 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;c_buffer;
<anchor xml:id="__abstract_exception_8hpp_source_1l00078"/>00078 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__abstract_exception_8hpp_source_1l00079"/>00079 
<anchor xml:id="__abstract_exception_8hpp_source_1l00080"/>00080 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;#ifdef&#32;USE_STACKTRACE_W_EXCEPTION_JPL</emphasis>
<anchor xml:id="__abstract_exception_8hpp_source_1l00084"/>00084 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keyword">virtual</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;_utils::_debug::Stacktrace*&#32;getStacktrace()<emphasis role="keyword">&#32;const</emphasis>{<emphasis role="keywordflow">return</emphasis>&#32;this-&gt;stacktrace;}
<anchor xml:id="__abstract_exception_8hpp_source_1l00085"/>00085 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;#endif</emphasis>
<anchor xml:id="__abstract_exception_8hpp_source_1l00086"/>00086 
<anchor xml:id="__abstract_exception_8hpp_source_1l00094"/><link linkend="_classjpl_1_1__exception_1_1_abstract_exception_1acc66a0e9cac563660a670782749334c3">00094</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keyword">friend</emphasis>&#32;std::ostream&amp;&#32;<link linkend="_classjpl_1_1__exception_1_1_abstract_exception_1acc66a0e9cac563660a670782749334c3">operator&lt;&lt;</link>(std::ostream&amp;&#32;os,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classjpl_1_1__exception_1_1_abstract_exception">AbstractException</link>&#32;&amp;iae){
<anchor xml:id="__abstract_exception_8hpp_source_1l00095"/>00095 
<anchor xml:id="__abstract_exception_8hpp_source_1l00096"/>00096 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*&#32;buffer&#32;=&#32;iae.<link linkend="_classjpl_1_1__exception_1_1_abstract_exception_1ae17527e3192e5afdb01a90f199dbafe5">what</link>();
<anchor xml:id="__abstract_exception_8hpp_source_1l00097"/>00097 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;os&lt;&lt;buffer&lt;&lt;std::endl;
<anchor xml:id="__abstract_exception_8hpp_source_1l00098"/>00098 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">delete</emphasis>[]&#32;buffer;
<anchor xml:id="__abstract_exception_8hpp_source_1l00099"/>00099 
<anchor xml:id="__abstract_exception_8hpp_source_1l00100"/>00100 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;#ifdef&#32;USE_STACKTRACE_W_EXCEPTION_JPL</emphasis>
<anchor xml:id="__abstract_exception_8hpp_source_1l00101"/>00101 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;os&lt;&lt;iae.getStacktrace()&lt;&lt;std::endl;
<anchor xml:id="__abstract_exception_8hpp_source_1l00102"/>00102 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;#endif</emphasis>
<anchor xml:id="__abstract_exception_8hpp_source_1l00103"/>00103 
<anchor xml:id="__abstract_exception_8hpp_source_1l00104"/>00104 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;os;
<anchor xml:id="__abstract_exception_8hpp_source_1l00105"/>00105 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__abstract_exception_8hpp_source_1l00106"/>00106 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;};
<anchor xml:id="__abstract_exception_8hpp_source_1l00107"/>00107 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__abstract_exception_8hpp_source_1l00108"/>00108 &#32;&#32;&#32;&#32;}
<anchor xml:id="__abstract_exception_8hpp_source_1l00109"/>00109 
<anchor xml:id="__abstract_exception_8hpp_source_1l00115"/><link linkend="__abstract_exception_8hpp_1ae4fd3f8792e038acc9f1c0703205f8b0">00115</link> <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;STRINGIFY(arg)&#32;#arg</emphasis>
<anchor xml:id="__abstract_exception_8hpp_source_1l00116"/>00116 
<anchor xml:id="__abstract_exception_8hpp_source_1l00117"/>00117 <emphasis role="preprocessor">#endif</emphasis>
</programlisting></section>
