<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<chapter xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_mainpage" xml:lang="en-US">
<title>&lt;strong&gt;Exception (CM)&lt;/strong&gt;</title>
<indexterm><primary>&lt;strong&gt;Exception (CM)&lt;/strong&gt;</primary></indexterm>

<para><anchor xml:id="_index_1md__r_e_a_d_m_e"/><formalpara><title><emphasis>Exception</emphasis></title></formalpara>
</para>

<para><?linebreak?> This module provides you some exception which could be useful in order to give more information about errors encourented during the life of your program. <?linebreak?>All exception are extended as an hierarchy which as you can read in this documentation <?linebreak?><?linebreak?> Keep in mind that, although JPL provide <link xlink:href="https://github.com/Gabriele-P03/Libraries/tree/main/logger">Logger</link>, it is not used in this module to print messages of occurred exception, it will be your duty to do it.<?linebreak?> Otherwise, you have to define USE_EXCEPTION_W_LOGGER_JPL before to include <link xlink:href="https://github.com/Gabriele-P03/JPL/blob/main/logger/src/LoggerWrapper.hpp">LoggerWrapper.hpp</link> <?linebreak?><?linebreak?> The message of the thrown exception can be retrieved via what() function.<?linebreak?> Some of those override this function in order to take out a template message composed by different arguments.<?linebreak?> Check each of them to get more information. <?linebreak?><?linebreak?> This module can be involved into using JPL&apos;s Stacktrace feature - provided by <link xlink:href="https://github.com/Gabriele-P03/Libraries/tree/main/utils">Utils</link> (into debug) - defining USE_STACKTRACE_W_EXCEPTION_JPL, then you will be able to get stacktrace of the thrown exception via getStacktrace(). <?linebreak?> Also, defining that macro, the stacktrace will be printed when the exception instance is passed to std::cout <?linebreak?> </para>
</chapter>
